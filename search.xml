<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Glibc中堆管理的变化</title>
      <link href="/2020/04/03/libc230/"/>
      <url>/2020/04/03/libc230/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学pwn的道路上，我们大多从linux入手，从栈到堆，各种漏洞利用，都和Glibc或多或少打过交道。我的堆入门应该和很多人一样是从libc2.23开始的，之后又经历了各种libc版本的变化，随着现在的pwn题越来越与时俱进，我们会逐渐接触更新的libc版本，因此，我们必须知道，Glibc中堆管理变化了什么，从安全角度，我们的得失又是什么呢？从libc2.27开始，我们聊一聊Glibc中堆管理的漏洞利用得失。</p><p>关键字： <code>CTF</code> <code>pwn</code> <code>新版本libc</code> <code>libc 2.27</code> <code>libc 2.29</code> <code>libc 2.30</code>  <code>堆溢出</code></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>largebin attack</title>
      <link href="/2020/04/02/LargebinAttack/"/>
      <url>/2020/04/02/LargebinAttack/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>把以前学过的东西再复习总结一下，温故而知新。<br>由于相较其他heap，largebin 中的机制相对复杂，所以largebin attack 一直是CTF的堆漏洞利用常规而少见的一种，但是却一直活着人们的心中。<br>关键字： <code>CTF</code> <code>pwn</code> <code>堆溢出</code> <code>largebin</code> <code>largebin attack</code> </p><a id="more"></a><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>我们以64位，libc 2.27为例，其实与2.23差不多，只不过2.27中，0x420以下堆块会进入tcache，但是2.23中0x400就能进入largebin了</p><p><img src="/2020/04/02/LargebinAttack/image-20200402092305156.png" alt="image-20200402092305156"></p><p><img src="/2020/04/02/LargebinAttack/image-20200402092336545.png" alt="image-20200402092336545"></p><p>开始介绍large bin的相关机制。在此之前，请学习堆的申请与释放等相关知识。</p><h3 id="largebin-从哪里来"><a href="#largebin-从哪里来" class="headerlink" title="largebin 从哪里来"></a>largebin 从哪里来</h3><p>在堆的机制中，free掉的chunk会进入bin，如果此chunk的大小大于fastbin，free后就会先进unsorted bin，之后，再次申请更大堆块，unsorted bin无法满足，heap就会进入large bin，那么large bin的范围是多少呢？</p><p>源码告诉我们一切：</p><p><img src="/2020/04/02/LargebinAttack/image-20200402092622322.png" alt="image-20200402092622322"></p><p>源码中可以看到，MIN_LARGE_SIZE是（64 - 0）*0x10 = 0x400，也就是最小的large bin。这里的MALLOC_ALIGNMENT其实等于SIZE_SZ，即系统位数乘以2，64位系统即 0x8乘以2=0x10，32位为0x4乘以2=0x8。</p><p>也就是说我们可以申请0x400的chunk，然后free掉进unsorted bin ，之后申请更大chunk，就可以将0x400的堆放入largebin。</p><p><strong>注意</strong>:此时，我们使用的是libc 2.27，所以，其实0x400到不了largebin，而是tcache的范围，所以，在libc 2.27中，一般使用0x420，但是如果可以将0x400的tcache填满，也是可以申请到largebin的</p><p>那么large bin 的index如何确定呢，这里，系统采取了相对于fastbin和smallbin更加粗犷的方式：</p><p><img src="/2020/04/02/LargebinAttack/image-20200402094851272.png" alt="image-20200402094851272"></p><p>large bin采取了分段的存储，比如第一个范围就是0x400到(48&lt;&lt;6)，即0x400到0xc00，而其中，每个链表之间大小差为(1&lt;&lt;6)=0x40，结果如下表：</p><table><thead><tr><th>index</th><th>size范围</th></tr></thead><tbody><tr><td>64</td><td>[0x400,0x440) 相差0x40</td></tr><tr><td>65</td><td>[0x440,0x480)相差0x40</td></tr><tr><td>……</td><td>……相差0x40</td></tr><tr><td>96</td><td>[0xc00,0xc40)相差0x40</td></tr><tr><td>97</td><td>[0xc40,0xe00)相差0x1c0</td></tr><tr><td>98</td><td>[0xe00,0x1000)相差0x200</td></tr><tr><td>……</td><td>……相差0x200</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><h3 id="largebin-的内部"><a href="#largebin-的内部" class="headerlink" title="largebin 的内部"></a>largebin 的内部</h3><p>因为largebin，一个bin内部并不是一个size，所以需要<code>fd_nextsize</code>与<code>bk_nextsize</code>将其串起来。</p><p>那么largebin内部是如何布置的呢：</p><p>首先<code>fd_nextsize</code>指向比他小的最大heap，而<code>bk_nextsize</code>指向比他大的最小的heap，最后将两条链条首尾相连。而<code>fd</code>和<code>bk</code>和其原来的任务一样，都是指向和其大小相同的堆块。<br>那么，画个草图：</p><p><img src="/2020/04/02/LargebinAttack/image-20200402111701002.png" alt="image-20200402111701002"></p><p>那么如果bin里的大小都一样的话，那么第一个释放的堆块作为此bin链的链首（这个和fastbin和tcache都不一样），<code>fd_nextsize</code>与<code>bk_nextsize</code>都指向自己,其余的大小相同的堆块free的时候,<code>fd_nextsize</code>与<code>bk_nextsize</code>就都为0了。</p><p>而<code>fd</code>和<code>bk</code>与原本作用一样,指向上一个释放的堆块,但是,这里的链头始终为第一个释放的chunk。</p><p>做个小实验,申请4个堆块ABCD,AB大小为0x450,CD大小为0x460,如下图:</p><p><img src="/2020/04/02/LargebinAttack/image-20200402113438934.png" alt="image-20200402113438934"></p><p>其堆块如下:</p><p><img src="/2020/04/02/LargebinAttack/image-20200402114125282.png" alt="image-20200402114125282"></p><p>将其释放至unsorted bin,释放顺序为A B D C:</p><p><img src="/2020/04/02/LargebinAttack/image-20200402114259052.png" alt="image-20200402114259052"></p><p>之后我们申请0x470堆块,此时unsorted bin无法满足,将ABCD放入large bin:</p><p><img src="/2020/04/02/LargebinAttack/image-20200402113600182.png" alt="image-20200402113600182"></p><p><img src="/2020/04/02/LargebinAttack/image-20200402113624719.png" alt="image-20200402113624719"></p><p>此时largebin内由<code>fd</code>和<code>bk</code>组成的链为:</p><p><img src="/2020/04/02/LargebinAttack/image-20200402114704005.png" alt="image-20200402114704005"></p><p>此时的<code>fd_nextsize</code>与<code>bk_nextsize</code>:</p><p><img src="/2020/04/02/LargebinAttack/image-20200402113741504.png" alt="image-20200402113741504"></p><p>最后的示意图即:</p><p><img src="/2020/04/02/LargebinAttack/image-20200402115110172.png" alt="image-20200402115110172"></p><p>那么large bin 是如何申请到的呢?</p><p>源码中显示:</p><ol><li>首先通过申请的size找到index,进而找到指定的bin链</li><li>在找到bin链后,从最小的heap开始通过<code>bk_nextsize</code>找到第一个大于等于size的heap</li><li>在找到heap后,利用fd判断下一个heap的size是否于当前heap的size,如果相等,将下一个heap返回,这样可以减少设置链头的操作</li><li>利用unlink取下得到的heap</li><li>判断heap的size减去申请的size是否大于MINSIZE,如果大于就将其放入unsorted bin,如果小于,那么直接分配给用户</li></ol><p>这就是largebin的分配过程,那么largebin只有这一种被申请的方式吗?</p><p>如果在申请堆块的时候没有找到合适heap的时候,会从topchunk开始申请,在此之前,程序会遍历比当前index大的索引,如果在大于fastbin的范围内,存在heap,就会从中切割申请的大小,当前heap的size减去申请的size是否大于MINSIZE,如果大于就将其放入unsorted bin,如果小于,那么直接分配给用户。</p><p>即，如果在上述情况下申请0x60，就会从B中分配0x60，余下0x3e0归入unsorted bin</p><p><img src="/2020/04/02/LargebinAttack/image-20200402134441802.png" alt="image-20200402134441802"></p><p>这就是largebin在ptmalloc中的机制了。</p><h2 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large bin attack"></a>large bin attack</h2><p>那么large bin attack又是怎么进行的呢？</p><p>现在有两种常见的利用方式：</p><ul><li>在申请largebin的过程中，伪造largebin的<code>bk_nextsize</code>，实现非预期内存申请。</li><li>在largebin插入的过程中，伪造largebin的<code>bk_nextsize</code>以及<code>bk</code>，实现任意地址写堆地址。</li></ul><h3 id="申请时利用"><a href="#申请时利用" class="headerlink" title="申请时利用"></a>申请时利用</h3><p>在申请largebin的时候，从最小的heap开始，利用<code>bk_nextsize</code>寻找合适的heap，如果找到了合适的heap，就将其取出，那么如果我们将<code>bk_nextsize</code>指向其他地方，就可以申请到其他地方。<br>看下源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((victim = first (bin)) != bin</span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (victim)</span><br><span class="line">        &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb))</span><br><span class="line">            &#123;</span><br><span class="line">              victim = victim-&gt;bk_nextsize;</span><br><span class="line">              <span class="keyword">while</span> (((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (<span class="built_in">size</span> = chunksize (victim)) &lt;</span><br><span class="line">                      (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb)))</span><br><span class="line">                victim = victim-&gt;bk_nextsize; <span class="comment">//寻找堆块</span></span><br><span class="line">                </span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">              remainder_size = <span class="built_in">size</span> - nb;</span><br><span class="line">              unlink (av, victim, bck, fwd); <span class="comment">//unlink</span></span><br></pre></td></tr></table></figure><p>所以只需要在目标地方符合unlink，那么就可以通过检查了。<br>举个例子：<br>申请一个largebin，之后free，再申请一个大堆块使之前堆块进入large bin：</p><p>申请A和底下分割的0x20，之后freeA，申请B和C。</p><p><img src="/2020/04/02/LargebinAttack/image-20200402155926664.png" alt="image-20200402155926664"></p><p>之后，我们开始利用，这里提供两种思路吧，但是其本质都是修改bk_nextsize。</p><ul><li><p>直接将bk_nextsize指向B的头</p></li><li><p>将bk_nextsize指向B的内容</p></li></ul><p>第一种和第二种本质上一样，但是第二种可以顺便利用unlink，向bss段上写一个bss段地址，这里假设bss段上存着堆地址，如果PIE开启了，就不好操作了，这里我们关掉PIE，演示第二种漏洞利用。<br>修改A的bk_nextsize，假设此时有UAF：<br>也就是将<code>bk_nextsize = B+0x10</code>，而B+0x10一般存在bss段上，所以，此时B上伪造以一个的<code>fd = bss - 0x18</code>,<code>bk= bss - 0x10</code>的堆块，这都属于unlink常规操作。注意伪造堆块的fd_nextsize要等于0，因为unlink有检查</p><p><img src="/2020/04/02/LargebinAttack/image-20200402171500760.png" alt="image-20200402171500760"></p><p>之后注意对于伪造堆块检查，即检查下一个堆块的pre_size。<br>最后得到：</p><p><img src="/2020/04/02/LargebinAttack/image-20200402173228230.png" alt="image-20200402173228230"></p><p>此时申请large bin ，就会得到fake B的内存区域。</p><h3 id="插入时利用"><a href="#插入时利用" class="headerlink" title="插入时利用"></a>插入时利用</h3><p>在申请大堆块后，unsorted bin不满足size要求，会将其放入large bin，此时，我们可以通过一些办法，达到一次任意地址写堆地址的目的，看代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">victim_index = largebin_index (<span class="built_in">size</span>);</span><br><span class="line">         bck = bin_at (av, victim_index); <span class="comment">//这个是main_arena的地址</span></span><br><span class="line">         fwd = bck-&gt;fd;<span class="comment">//这是最大size的链首</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">         <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">             <span class="built_in">size</span> |= PREV_INUSE;</span><br><span class="line">             <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">             assert (chunk_main_arena (bck-&gt;bk));</span><br><span class="line">             <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (<span class="built_in">size</span>)<span class="comment">//bck-&gt;bk是最小size的链首</span></span><br><span class="line">   &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk)) <span class="comment">//如果当前申请的size小于最小szie</span></span><br><span class="line">               &#123;</span><br><span class="line">                 fwd = bck;</span><br><span class="line">                 bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">                 victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">                 victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize; </span><br><span class="line">                 fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<span class="comment">//这里不好整</span></span><br><span class="line">               &#125;</span><br><span class="line">             <span class="keyword">else</span> <span class="comment">//如果当前申请的size不是最小的</span></span><br><span class="line">               &#123;</span><br><span class="line">                 assert (chunk_main_arena (fwd));</span><br><span class="line">                 <span class="keyword">while</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) <span class="built_in">size</span> &lt; chunksize_nomask (fwd)) <span class="comment">//从最大块开始寻找一个小于szie的链</span></span><br><span class="line">                   &#123;</span><br><span class="line">                     fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">assert (chunk_main_arena (fwd));</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) <span class="built_in">size</span></span><br><span class="line">== (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (fwd)) <span class="comment">// 如果找到的链和申请的size相同</span></span><br><span class="line">                   <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                   fwd = fwd-&gt;fd; </span><br><span class="line">                 <span class="keyword">else</span><span class="comment">//如果不同，则说明应该插在这个链前面</span></span><br><span class="line">                   &#123;</span><br><span class="line">                     victim-&gt;fd_nextsize = fwd;<span class="comment">//小的链在victim上</span></span><br><span class="line">                     victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<span class="comment">//这里如果可以控制</span></span><br><span class="line">                     fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                     victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<span class="comment">//这里能写一个victim</span></span><br><span class="line">                   &#125;</span><br><span class="line">                 bck = fwd-&gt;bk;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">           victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     mark_bin (av, victim_index);</span><br><span class="line">     victim-&gt;bk = bck;</span><br><span class="line">     victim-&gt;fd = fwd;</span><br><span class="line">     fwd-&gt;bk = victim;</span><br><span class="line">     bck-&gt;fd = victim;<span class="comment">//最后这里，还可以有一次写，如果fwd-&gt;bk可控</span></span><br></pre></td></tr></table></figure><p>可以看到，这段代码中有两次可以写入victim的地方，由于其比较简单，没啥检查，所以可以直接搞起：</p><p>搞到一块large bin 然后搞到一块更大的large bin，且其index一样。在得到这个large bin之前，先改写原本就在large bin中的堆块的bk或bk_nextsize。</p><p>举个例子：</p><p>首先申请3个chunk，free A堆块，之后申请更大的chunk</p><p><img src="/2020/04/02/LargebinAttack/image-20200402194349362.png" alt="image-20200402194349362"></p><p>此时A在large bin内，之后修改A的bk或bk_nextsize：</p><p><img src="/2020/04/02/LargebinAttack/image-20200402194649105.png" alt="image-20200402194649105"></p><p>修改上述的bk和bk_nextsize，后续就可以达到在target1和target2中写堆B地址的目的。</p><p>之后，free chunk B，然后申请大于等于0x480的堆块，比如申请malloc(0x470)，就可以达到漏洞利用目的了。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>文章首发于freebuf</p><p>如有错误欢迎指正：<a href="mailto:sofr@foxmail.com">sofr@foxmail.com</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://ray-cp.github.io/archivers/ptmalloc_argebin_attack" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/ptmalloc_argebin_attack</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libc </tag>
            
            <tag> largebin attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ret2dl_resolve</title>
      <link href="/2020/04/01/re2dl_resolve/"/>
      <url>/2020/04/01/re2dl_resolve/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ret2dl_resolve是linux下一种利用linux系统延时绑定(Lazy Binding)机制的一种漏洞利用方法，其主要思想是利用_dl_runtime_resolve()函数写GOT表的操作，改写写入GOT的内容，使其成为getshell的函数值</p><p>关键字： <code>CTF</code> <code>pwn</code> <code>ret2dl_resolve</code> <code>ret2_dl_runtime_resolve</code> <code>延时绑定</code> <code>栈溢出</code> <code>ROP</code></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libc </tag>
            
            <tag> ret2dl_resolve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个flag</title>
      <link href="/2020/04/01/flag/"/>
      <url>/2020/04/01/flag/</url>
      
        <content type="html"><![CDATA[<p>搞个博客，常常更新自己的学习进度，督促自己学习，加油！！！flag立起来吧</p>]]></content>
      
      
      <categories>
          
          <category> personal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> personal </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
